import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { ArrowLeft, Edit3, Download, Share2, RefreshCw, Image as ImageIcon } from 'lucide-react';
import axios from 'axios';

const StoryDisplay = ({ story, onReset, onError, setIsLoading }) => {
  const [images, setImages] = useState([]);
  const [editingParagraph, setEditingParagraph] = useState(null);
  const [editInstructions, setEditInstructions] = useState('');
  const [isGeneratingImages, setIsGeneratingImages] = useState(false);

  const genreColors = {
    fantasy: 'story-fantasy',
    mystery: 'story-mystery',
    scifi: 'story-scifi',
    romance: 'story-romance',
    adventure: 'story-adventure'
  };

  const genreIcons = {
    fantasy: '🧙‍♂️',
    mystery: '🔍',
    scifi: '🚀',
    romance: '💕',
    adventure: '🗺️'
  };

  useEffect(() => {
    if (story && story.imagePrompts) {
      generateImages();
    }
  }, [story]);

  const generateImages = async () => {
    setIsGeneratingImages(true);
    try {
      const response = await axios.post('/api/generate-images', {
        imagePrompts: story.imagePrompts
      });
      
      if (response.data.success) {
        setImages(response.data.images);
      }
    } catch (error) {
      console.error('Error generating images:', error);
      // Continue without images if generation fails
    } finally {
      setIsGeneratingImages(false);
    }
  };

  const handleEditParagraph = async (paragraphIndex) => {
    if (!editInstructions.trim()) return;

    setIsLoading(true);
    try {
      const response = await axios.post('/api/edit-story', {
        originalStory: story.paragraphs[paragraphIndex],
        editInstructions,
        paragraphIndex
      });

      if (response.data.success) {
        // Update the story with the edited paragraph
        const updatedParagraphs = [...story.paragraphs];
        updatedParagraphs[paragraphIndex] = response.data.editedParagraph;
        
        // Create a new story object with updated paragraphs
        const updatedStory = {
          ...story,
          paragraphs: updatedParagraphs
        };
        
        // Update the parent component's story state
        // This would require a callback prop to update the parent state
        // For now, we'll just close the editing interface
        setEditingParagraph(null);
        setEditInstructions('');
      }
    } catch (error) {
      console.error('Error editing story:', error);
      onError('Failed to edit story. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const downloadStory = () => {
    const storyText = `
${story.summary}

${story.paragraphs.map((para, index) => `Paragraph ${index + 1}:\n${para}\n`).join('\n')}

Generated by AI StoryTeller
Genre: ${story.metadata.genre}
Characters: ${story.metadata.characters}
Paragraphs: ${story.metadata.paragraphs}
    `.trim();

    const blob = new Blob([storyText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `story-${story.metadata.genre}-${Date.now()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const shareStory = async () => {
    if (navigator.share) {
      try {
        await navigator.share({
          title: 'My AI-Generated Story',
          text: `Check out this ${story.metadata.genre} story I created with AI StoryTeller!`,
          url: window.location.href
        });
      } catch (error) {
        console.log('Error sharing:', error);
      }
    } else {
      // Fallback: copy to clipboard
      navigator.clipboard.writeText(window.location.href);
      alert('Link copied to clipboard!');
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="max-w-6xl mx-auto"
    >
      {/* Header Actions */}
      <div className="flex items-center justify-between mb-8">
        <motion.button
          onClick={onReset}
          className="btn-secondary flex items-center space-x-2"
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
        >
          <ArrowLeft className="w-4 h-4" />
          <span>Create New Story</span>
        </motion.button>

        <div className="flex items-center space-x-4">
          <motion.button
            onClick={downloadStory}
            className="btn-secondary flex items-center space-x-2"
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            <Download className="w-4 h-4" />
            <span>Download</span>
          </motion.button>
          
          <motion.button
            onClick={shareStory}
            className="btn-secondary flex items-center space-x-2"
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            <Share2 className="w-4 h-4" />
            <span>Share</span>
          </motion.button>
        </div>
      </div>

      {/* Story Header */}
      <div className="story-card mb-8">
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center space-x-4">
            <div className={`w-16 h-16 bg-purple-600 rounded-full flex items-center justify-center text-2xl`}>
              {genreIcons[story.metadata.genre]}
            </div>
            <div>
              <h1 className="text-3xl font-bold text-gray-900 font-display capitalize">
                {story.metadata.genre} Story
              </h1>
              <p className="text-gray-600">
                {story.metadata.paragraphs} paragraphs • {story.metadata.characters} characters
                {story.metadata.characterNames.length > 0 && ` • Featuring ${story.metadata.characterNames.join(', ')}`}
              </p>
            </div>
          </div>
        </div>

        {/* Summary/Preface */}
        <div className="bg-gradient-to-r from-blue-50 to-purple-50 border-l-4 border-primary-500 p-6 rounded-lg">
          <h3 className="text-lg font-semibold text-gray-800 mb-2">Story Summary</h3>
          <p className="text-gray-700 italic story-text">{story.summary}</p>
        </div>
      </div>

      {/* Story Content */}
      <div className="space-y-8">
        {story.paragraphs.map((paragraph, index) => (
          <motion.div
            key={index}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: index * 0.1 }}
            className="story-card"
          >
            <div className="grid md:grid-cols-2 gap-8">
              {/* Story Text */}
              <div>
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-xl font-semibold text-gray-800">
                    Paragraph {index + 1}
                  </h3>
                  <motion.button
                    onClick={() => setEditingParagraph(index)}
                    className="btn-secondary text-sm py-2 px-3"
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    <Edit3 className="w-4 h-4 mr-1" />
                    Edit
                  </motion.button>
                </div>
                
                <p className="story-text leading-relaxed">{paragraph}</p>
              </div>

              {/* Generated Image */}
              <div className="relative">
                <div className="bg-gray-100 rounded-lg overflow-hidden h-64 flex items-center justify-center">
                  {images[index] ? (
                    <div className="relative w-full h-full">
                      <img
                        src={images[index].imageUrl}
                        alt={images[index].altText}
                        className="w-full h-full object-cover"
                      />
                      {images[index].seed && (
                        <div className="absolute bottom-2 right-2 bg-black/70 text-white text-xs px-2 py-1 rounded">
                          Seed: {images[index].seed}
                        </div>
                      )}
                      {images[index].error && (
                        <div className="absolute top-2 left-2 bg-red-500 text-white text-xs px-2 py-1 rounded">
                          Fallback
                        </div>
                      )}
                    </div>
                  ) : (
                    <div className="text-center text-gray-500">
                      {isGeneratingImages ? (
                        <div className="flex flex-col items-center space-y-2">
                          <RefreshCw className="w-8 h-8 animate-spin text-primary-600" />
                          <span className="text-sm">Generating AI image...</span>
                          <span className="text-xs text-gray-400">Using Stability AI</span>
                        </div>
                      ) : (
                        <div className="flex flex-col items-center space-y-2">
                          <ImageIcon className="w-8 h-8 text-gray-400" />
                          <span className="text-sm">Click "Generate Images"</span>
                          <span className="text-xs text-gray-400">Real AI-generated images</span>
                        </div>
                      )}
                    </div>
                  )}
                </div>
              </div>
            </div>

            {/* Edit Interface */}
            <AnimatePresence>
              {editingParagraph === index && (
                <motion.div
                  initial={{ opacity: 0, height: 0 }}
                  animate={{ opacity: 1, height: 'auto' }}
                  exit={{ opacity: 0, height: 0 }}
                  className="mt-6 p-4 bg-gray-50 rounded-lg border"
                >
                  <h4 className="font-semibold text-gray-800 mb-2">Edit Paragraph {index + 1}</h4>
                  <textarea
                    value={editInstructions}
                    onChange={(e) => setEditInstructions(e.target.value)}
                    placeholder="Describe how you'd like to edit this paragraph..."
                    className="input-field mb-3 h-24 resize-none"
                  />
                  <div className="flex space-x-3">
                    <button
                      onClick={() => handleEditParagraph(index)}
                      className="btn-primary text-sm py-2 px-4"
                    >
                      Apply Edit
                    </button>
                    <button
                      onClick={() => {
                        setEditingParagraph(null);
                        setEditInstructions('');
                      }}
                      className="btn-secondary text-sm py-2 px-4"
                    >
                      Cancel
                    </button>
                  </div>
                </motion.div>
              )}
            </AnimatePresence>
          </motion.div>
        ))}
      </div>

      {/* Regenerate Images Button */}
      <div className="text-center mt-12">
        <div className="mb-4">
          <p className="text-sm text-gray-600">
            🎨 Images are generated using <strong>Stability AI</strong> for high-quality, story-specific illustrations
          </p>
        </div>
        <motion.button
          onClick={generateImages}
          disabled={isGeneratingImages}
          className="btn-primary flex items-center space-x-2 mx-auto"
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
        >
          <RefreshCw className={`w-5 h-5 ${isGeneratingImages ? 'animate-spin' : ''}`} />
          <span>{isGeneratingImages ? 'Generating AI Images...' : 'Generate AI Images'}</span>
        </motion.button>
        {isGeneratingImages && (
          <p className="text-sm text-gray-500 mt-2">
            This may take a few moments for each image...
          </p>
        )}
      </div>
    </motion.div>
  );
};

export default StoryDisplay;
